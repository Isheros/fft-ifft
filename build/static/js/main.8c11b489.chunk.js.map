{"version":3,"sources":["components/Instructions.js","components/Controls.js","components/Homepage.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","class","Controls","handleSumbit","e","a","preventDefault","sec","document","getElementById","value","ope","fetch","method","headers","body","JSON","stringify","res","json","data","console","log","onSubmit","className","htmlFor","id","placeholder","type","disabled","Homepage","action","role","Navbar","href","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAEaA,EAAe,kBAE5B,yBAAKC,MAAM,sCACH,wBAAIA,MAAM,iBAAV,iBACA,uBAAGA,MAAM,QAAT,6CACA,uBAAGA,MAAM,QAAT,6EACA,uBAAGA,MAAM,QAAT,yC,yBCLKC,EAAW,WAEpB,IAAMC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBD,EAAEE,iBACIC,EAAMC,SAASC,eAAe,aAAaC,MAC3CC,EAAMH,SAASC,eAAe,aAAaC,MAHhC,SAICE,MAAM,qDAAsD,CAC1EC,OAAQ,OACRC,QAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBN,MACAJ,UAXS,cAIXW,EAJW,gBAcEA,EAAIC,OAdN,OAcXC,EAdW,OAejBZ,SAASC,eAAe,aAAaC,MAAQU,EAC7CC,QAAQC,IAAIF,GAhBK,4CAAH,sDAmBlB,OACI,0BAAMG,SAAUpB,GACZ,kCACI,wDACA,yBAAKqB,UAAU,cACX,2BAAOC,QAAQ,aAAf,cACA,4BAAQD,UAAU,eAAeE,GAAG,aAChC,uCACA,0CAGR,yBAAKF,UAAU,cACX,2BAAOC,QAAQ,aAAf,wBACA,2BAAOD,UAAU,eAAeE,GAAG,YAAYC,YAAY,kBAE/D,4BAAQC,KAAK,SAASJ,UAAU,2BAAhC,eACA,yBAAKA,UAAU,cACX,2BAAOC,QAAQ,aAAf,cACA,2BAAOD,UAAU,eAAeE,GAAG,YAAYG,UAAQ,QCtC9DC,EAAW,kBAExB,0BAAMC,OAAO,KACT,0BAAMC,KAAK,QACP,yBAAK/B,MAAM,aACP,kBAAC,EAAD,MACA,kBAAC,EAAD,UCNCgC,EAAS,kBAClB,yBAAKhC,MAAM,kDACP,kBAAC,IAAD,CAAMuB,UAAU,eAAeU,KAAK,KAApC,0BCaOC,MAbf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,QCA3BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJrC,SAASC,eAAe,SDsHtB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.8c11b489.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Instructions = () => (\r\n\r\n<div class=\"alert alert-dismissible alert-info\">\r\n        <h4 class=\"alert-heading\">Instrucciones</h4>\r\n        <p class=\"mb-1\">1-Selecciona si quieres hacer FFT o IFFT.</p>\r\n        <p class=\"mb-1\">2-Ingresa los numeros separados por comas y usando j para los complejos. </p>\r\n        <p class=\"mb-1\">3-Finalmente haz click en calcular.</p>\r\n</div>\r\n\r\n)","import React from 'react'\r\n\r\n\r\nexport const Controls = () => {\r\n\r\n    const handleSumbit = async (e) => {\r\n        e.preventDefault();\r\n        const sec = document.getElementById('secuencia').value;\r\n        const ope = document.getElementById('operacion').value;\r\n        const res = await fetch(`https://fft-calculator.herokuapp.com/api/calculate`, {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                ope,\r\n                sec\r\n            })\r\n        })\r\n        const data = await res.json();\r\n        document.getElementById('resultado').value = data;\r\n        console.log(data)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSumbit}>\r\n            <fieldset>\r\n                <legend>Calculadora FFT/IFFT</legend>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"operacion\">Operacion:</label>\r\n                    <select className=\"form-control\" id=\"operacion\">\r\n                        <option>FFT</option>\r\n                        <option>IFFT</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"secuencia\">Secuencia de entrada</label>\r\n                    <input className=\"form-control\" id=\"secuencia\" placeholder=\"2,2,2,2*,2,2\" />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-outline-primary\">Calcular :)</button>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"resultado\">Resultado </label>\r\n                    <input className=\"form-control\" id=\"resultado\" disabled/>\r\n                </div>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport {Instructions} from './Instructions'\r\nimport {Controls} from './Controls'\r\n\r\nexport const Homepage = () => (\r\n\r\n<form action=\"#\">\r\n    <main role=\"main\">\r\n        <div class=\"container\">\r\n            <Instructions/>\r\n            <Controls/>\r\n        </div>\r\n    </main>\r\n</form>\r\n)\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport const Navbar = () => (\r\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n        <Link className=\"navbar-brand\" href=\"#\">Calculadora FFT/IFFT</Link>\r\n    </nav>\r\n)","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route}from 'react-router-dom'\r\n\r\nimport {Homepage} from './components/Homepage'\r\nimport { Navbar } from './components/Navbar'\r\n\r\nfunction App() {\r\n    return(\r\n        <Router>\r\n            <Navbar/>\r\n            <div>\r\n                <Switch>\r\n                    <Route path=\"/\" component={Homepage}/>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/litera/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}